#!/bin/sh
COMMIT_MSG_FILE=$1

# Captura a saída dos comandos git status e git diff
GIT_DIFF=$(git diff)

INICIO="
Describe the DIFF FILE in a sentence of no more than 6 words, considering the recommendations and the following output:

DIFF FILE:

"

FINAL="

RECOMMENDATIONS (type - meaning):
initial commit - commits for when the diff file is empty. 
feat - Commits of type feat indicate that your code snippet is adding a new feature (related to MINOR in semantic versioning). 
fix - Commits of type fix indicate that your committed code snippet is solving a problem (bug fix), (related to PATCH in semantic versioning). 
docs - Commits of type docs indicate that there have been changes in the documentation, such as in your repository’s Readme. (Does not include code changes). 
test - Commits of type test are used when changes are made to tests, whether creating, altering, or deleting unit tests. (Does not include code changes). 
build - Commits of type build are used when modifications are made to build files and dependencies. 
perf - Commits of type perf are used to identify any code changes related to performance. 
style - Commits of type style indicate that there have been changes related to code formatting, semicolons, trailing spaces, lint… (Does not include code changes). 
refactor - Commits of type refactor refer to changes due to refactoring that do not alter functionality, such as a change in the way a part of the screen is processed but maintaining the same functionality, or performance improvements due to a code review. 
chore - Commits of type chore indicate updates to build tasks, admin configurations, packages… such as adding a package to gitignore. (Does not include code changes). 
ci - Commits of type ci indicate changes related to continuous integration. 
raw - Commits of type raw indicate changes related to configuration files, data, features, parameters. 
cleanup - Commits of type cleanup are used to remove commented code, unnecessary snippets, or any other form of source code cleanup, aiming to improve its readability and maintainability. 
remove - Commits of type remove indicate the deletion of obsolete or unused files, directories, or functionalities, reducing the project’s size and complexity and keeping it more organized.

OUTPUT:
type - description
"

PROMPT=$(printf %q "$INICIO" %q "$GIT_DIFF" %q "$FINAL")
# PROMPT=$(echo -e "$INICIO\n$GIT_DIFF\n$FINAL" | sed ':a;N;$!ba;s/\n/\\n/g')

# echo $PAYLOAD > commit.json
# 
# Envia a requisição POST para a API e captura a resposta

PAYLOAD=$(
    printf '{
        "model": "gpt-4o-mini",
        "messages": [
            {
                "role": "system",
                "content": "You are a helpful assistant that analyze commits in a repo github"
            },
            {
                "role": "user",
                "content": "%s"
            }
        ]
    }' "$PROMPT"
)

API_RESPONSE=$(curl -X POST "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "$PAYLOAD"
)

# Extrai o campo 'mensagem' da resposta JSON
# MENSAGEM=$(echo $API_RESPONSE | grep -o '"message": *"[^"]*"' | awk -F'"' '{print $4}')

# Adiciona a mensagem extraída no início do arquivo de mensagem de commit
echo "$PAYLOAD"
# echo "$MENSAGEM" > temp_msg
# cat "$COMMIT_MSG_FILE" >> temp_msg
# mv temp_msg "$COMMIT_MSG_FILE"